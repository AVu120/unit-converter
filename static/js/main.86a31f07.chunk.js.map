{"version":3,"sources":["App.module.scss","components/input/Input.module.scss","components/inputs/Inputs.module.scss","services/data.ts","services/unitConversion.ts","components/input/Input.tsx","components/inputs/Inputs.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","data","Length","unitsToLabels","m","cm","mm","Î¼m","conversionFunctions","num","formulas","Mass","t","kg","g","updateUnitValues","e","unit","units","leftToRightConversion","rightToLeftConversion","setState","setErrors","errors","stringValue","target","value","trim","numberValue","Number","split","some","char","isNaN","replace","includes","getConversionFunctions","unitType","unit1","unit2","unit1Keys","Object","keys","i","length","unit1Key","matchingUnit2Keys","j","matchingUnit2Key","result","getFormula","formula","Input","onChange","setUnitValues","useContext","UnitTypeContext","unitValues","currentErrors","entries","filter","_","hasValidInput","errorMessage","unitOptions","className","styles","input_container","input","input_error","error_message","updatedUnitValues","updatedErrors","updatedConversionFunctions","newUnit","isUpdatingUnit1","isUpdatingUnit2","hasSwappedUnits","values","error","updateUnit","select","map","dataUnit","dataLabel","Inputs","inputs_grid","equalSign","createContext","App","useState","setUnitType","defaultUnit1","defaultUnit2","useEffect","Provider","unit_converter_container","title","measurement_selector_input","unitTypeValue","formula_logo","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.86a31f07.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__3ZAev\",\"unit_converter_container\":\"App_unit_converter_container__QY9Z_\",\"title\":\"App_title__j7qcJ\",\"measurement_selector_input\":\"App_measurement_selector_input__1vxfi\",\"formula_logo\":\"App_formula_logo__9rKYy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input_container\":\"Input_input_container__17y1_\",\"input\":\"Input_input__2dbmL\",\"input_error\":\"Input_input_error__1ws1N\",\"error_message\":\"Input_error_message__wkajL\",\"select\":\"Input_select__2cSVP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputs_grid\":\"Inputs_inputs_grid__1tazd\",\"equalSign\":\"Inputs_equalSign__3iD-3\"};","const data: any = {\r\n  Length: {\r\n    unitsToLabels: {\r\n      m: \"Meter\",\r\n      cm: \"Centimeter\",\r\n      mm: \"Millimeter\",\r\n      Î¼m: \"Micrometer\",\r\n    },\r\n    conversionFunctions: {\r\n      m: {\r\n        cm: [\r\n          (num: number): number => num * 100,\r\n          (num: number): number => num / 100,\r\n        ],\r\n        mm: [\r\n          (num: number): number => num * 1000,\r\n          (num: number): number => num / 1000,\r\n        ],\r\n        Î¼m: [\r\n          (num: number): number => num * 1000000,\r\n          (num: number): number => num / 1000000,\r\n        ],\r\n      },\r\n      cm: {\r\n        mm: [\r\n          (num: number): number => num * 10,\r\n          (num: number): number => num / 10,\r\n        ],\r\n        Î¼m: [\r\n          (num: number): number => num * 10000,\r\n          (num: number): number => num / 10000,\r\n        ],\r\n      },\r\n      mm: {\r\n        Î¼m: [\r\n          (num: number): number => num * 1000,\r\n          (num: number): number => num / 1000,\r\n        ],\r\n      },\r\n    },\r\n    formulas: {\r\n      m: {\r\n        cm: [\r\n          \"multiply the length value by 100\",\r\n          \"divide the length value by 100\",\r\n        ],\r\n        mm: [\r\n          \"multiply the length value by 1000\",\r\n          \"divide the length value by 1000\",\r\n        ],\r\n        Î¼m: [\r\n          \"multiply the length value by 1e+6\",\r\n          \"divide the length value by 1e+6\",\r\n        ],\r\n      },\r\n      cm: {\r\n        mm: [\r\n          \"multiply the length value by 10\",\r\n          \"divide the length value by 10\",\r\n        ],\r\n        Î¼m: [\r\n          \"multiply the length value by 10000\",\r\n          \"divide the length value by 10000\",\r\n        ],\r\n      },\r\n      mm: {\r\n        Î¼m: [\r\n          \"multiply the length value by 1000\",\r\n          \"divide the length value by 1000\",\r\n        ],\r\n      },\r\n    },\r\n  },\r\n  Mass: {\r\n    unitsToLabels: {\r\n      t: \"Tonne\",\r\n      kg: \"Kilogram\",\r\n      g: \"Gram\",\r\n    },\r\n    conversionFunctions: {\r\n      t: {\r\n        kg: [\r\n          (num: number): number => num * 1000,\r\n          (num: number): number => num / 1000,\r\n        ],\r\n        g: [\r\n          (num: number): number => num * 1000000,\r\n          (num: number): number => num / 1000000,\r\n        ],\r\n      },\r\n      kg: {\r\n        g: [\r\n          (num: number): number => num * 1000,\r\n          (num: number): number => num / 1000,\r\n        ],\r\n      },\r\n    },\r\n    formulas: {\r\n      t: {\r\n        kg: [\r\n          \"multiply the mass value by 1000\",\r\n          \"divide the mass value by 1000\",\r\n        ],\r\n        g: [\"multiply the mass value by 1e+6\", \"divide the mass value by 1e+6\"],\r\n      },\r\n      kg: {\r\n        g: [\"multiply the mass value by 1000\", \"divide the mass value by 1000\"],\r\n      },\r\n    },\r\n  },\r\n};\r\n\r\nexport default data;\r\n","import {\r\n  TChangeEvent,\r\n  TConversionFunction,\r\n  TMapOfStrings,\r\n  TSetErrors,\r\n  TSetState,\r\n  TUnit,\r\n  TUnits,\r\n  TUnitType,\r\n} from \"../types/common\";\r\nimport data from \"./data\";\r\n\r\ninterface IUpdateUnitValuesParams {\r\n  e: TChangeEvent;\r\n  unit: TUnit;\r\n  units: TUnits;\r\n  leftToRightConversion: TConversionFunction;\r\n  rightToLeftConversion: TConversionFunction;\r\n  setState: TSetState;\r\n  setErrors: TSetErrors;\r\n  errors: TMapOfStrings;\r\n}\r\n\r\nexport const updateUnitValues = ({\r\n  e,\r\n  unit,\r\n  units,\r\n  leftToRightConversion,\r\n  rightToLeftConversion,\r\n  setState,\r\n  setErrors,\r\n  errors,\r\n}: IUpdateUnitValuesParams): void => {\r\n  const stringValue = e.target.value.trim();\r\n  const numberValue = Number(stringValue);\r\n  // Display error message if user types in a non-number, multiple dots or a space character.\r\n  if (\r\n    stringValue\r\n      .split(\"\")\r\n      .some(\r\n        (char) =>\r\n          (char !== \".\" && isNaN(Number(char))) ||\r\n          stringValue.replace(\".\", \"\").includes(\".\")\r\n      )\r\n  ) {\r\n    // If user typed into left input.\r\n    if (unit === units[0]) {\r\n      setErrors({\r\n        [units[0]]: \"Error: only valid numbers allowed.\",\r\n        [units[1]]: \"\",\r\n      });\r\n      return setState({\r\n        [units[0]]: stringValue,\r\n        [units[1]]: \"\",\r\n      });\r\n    }\r\n    // If user typed into right input.\r\n    setErrors({\r\n      [units[0]]: \"\",\r\n      [units[1]]: \"Error: only valid numbers allowed.\",\r\n    });\r\n    return setState({\r\n      [units[0]]: \"\",\r\n      [units[1]]: stringValue,\r\n    });\r\n  }\r\n  // Allow user to press delete/backspace button until input field is empty/blank.\r\n  if (stringValue === \"\") {\r\n    if (!errors.unit)\r\n      setErrors({\r\n        [units[0]]: \"\",\r\n        [units[1]]: \"\",\r\n      });\r\n    return setState({\r\n      [units[0]]: \"\",\r\n      [units[1]]: \"\",\r\n    });\r\n  }\r\n  // Remove error message when user types valid character (e.g. number or single '.').\r\n  if (!errors.unit)\r\n    setErrors({\r\n      [units[0]]: \"\",\r\n      [units[1]]: \"\",\r\n    });\r\n\r\n  // When user types into left input, display conversion on right input.\r\n  if (unit === units[0]) {\r\n    return setState({\r\n      [units[0]]: stringValue.includes(\".\") ? stringValue : numberValue,\r\n      [units[1]]: stringValue === \".\" ? \"\" : leftToRightConversion(numberValue),\r\n    });\r\n  }\r\n  // When user types into right input, display conversion on left input.\r\n  setState({\r\n    [units[0]]: stringValue === \".\" ? \"\" : rightToLeftConversion(numberValue),\r\n    [units[1]]: stringValue.includes(\".\") ? stringValue : numberValue,\r\n  });\r\n};\r\n\r\nexport const getConversionFunctions = (\r\n  unitType: TUnitType,\r\n  unit1: TUnit,\r\n  unit2: TUnit\r\n): [TConversionFunction, TConversionFunction] => {\r\n  let conversionFunctions;\r\n  const unit1Keys = Object.keys(data[unitType].conversionFunctions);\r\n  for (let i = 0; i < unit1Keys.length; i++) {\r\n    let unit1Key = unit1Keys[i];\r\n    let matchingUnit2Keys = Object.keys(\r\n      data[unitType].conversionFunctions[unit1Key]\r\n    );\r\n\r\n    for (let j = 0; j < matchingUnit2Keys.length; j++) {\r\n      let matchingUnit2Key = matchingUnit2Keys[j];\r\n      if (unit1 === unit1Key && unit2 === matchingUnit2Key)\r\n        conversionFunctions = data[unitType].conversionFunctions[unit1][unit2];\r\n      else if (unit1 === matchingUnit2Key && unit2 === unit1Key) {\r\n        const result = data[unitType].conversionFunctions[unit2][unit1];\r\n        conversionFunctions = [result[1], result[0]];\r\n      }\r\n    }\r\n  }\r\n  return conversionFunctions;\r\n};\r\n\r\nexport const getFormula = (\r\n  unitType: TUnitType,\r\n  unit1: TUnit,\r\n  unit2: TUnit\r\n): string => {\r\n  let formula;\r\n  const unit1Keys = Object.keys(data[unitType].formulas);\r\n  for (let i = 0; i < unit1Keys.length; i++) {\r\n    let unit1Key = unit1Keys[i];\r\n    let matchingUnit2Keys = Object.keys(data[unitType].formulas[unit1Key]);\r\n\r\n    for (let j = 0; j < matchingUnit2Keys.length; j++) {\r\n      let matchingUnit2Key = matchingUnit2Keys[j];\r\n      if (unit1 === unit1Key && unit2 === matchingUnit2Key)\r\n        formula = data[unitType].formulas[unit1][unit2][0];\r\n      else if (unit1 === matchingUnit2Key && unit2 === unit1Key) {\r\n        formula = data[unitType].formulas[unit2][unit1][1];\r\n      }\r\n    }\r\n  }\r\n  return formula;\r\n};\r\n\r\ninterface IUpdateUnitParams {\r\n  e: any;\r\n  unitType: TUnitType;\r\n  unit: TUnit;\r\n  units: TUnits;\r\n  unitValues: TMapOfStrings;\r\n  setUnitValues: TSetState;\r\n  errors: TMapOfStrings;\r\n  setErrors: TSetErrors;\r\n}\r\n\r\nexport const updateUnit: any = ({\r\n  e,\r\n  unit,\r\n  units,\r\n  unitType,\r\n  unitValues,\r\n  setUnitValues,\r\n  errors,\r\n  setErrors,\r\n}: IUpdateUnitParams) => {\r\n  let updatedUnitValues;\r\n  let updatedErrors;\r\n  let updatedConversionFunctions;\r\n  const newUnit = e.target.value;\r\n  const isUpdatingUnit1 = unit === units[0];\r\n  const isUpdatingUnit2 = unit === units[1];\r\n\r\n  const hasSwappedUnits =\r\n    (isUpdatingUnit1 && newUnit === units[1]) ||\r\n    (isUpdatingUnit2 && newUnit === units[0]);\r\n  const hasError = Object.values(errors).some((error) => error);\r\n\r\n  if (hasError) {\r\n    updatedErrors = {\r\n      [isUpdatingUnit1 ? newUnit : Object.keys(errors)[0]]: \"\",\r\n      [isUpdatingUnit2 ? newUnit : Object.keys(errors)[1]]: \"\",\r\n    };\r\n    updatedUnitValues = {\r\n      [isUpdatingUnit1\r\n        ? newUnit\r\n        : Object.keys(unitValues)[hasSwappedUnits ? 1 : 0]]: 0,\r\n      [isUpdatingUnit2\r\n        ? newUnit\r\n        : Object.keys(unitValues)[hasSwappedUnits ? 0 : 1]]: 0,\r\n    };\r\n    setErrors(updatedErrors);\r\n    return setUnitValues(updatedUnitValues);\r\n  }\r\n\r\n  // When changing unit of 1st input.\r\n  if (isUpdatingUnit1) {\r\n    updatedConversionFunctions = getConversionFunctions(\r\n      unitType,\r\n      newUnit,\r\n      units[hasSwappedUnits ? 0 : 1]\r\n    );\r\n\r\n    if (hasSwappedUnits)\r\n      updatedConversionFunctions = [\r\n        updatedConversionFunctions[1],\r\n        updatedConversionFunctions[0],\r\n      ];\r\n\r\n    updatedUnitValues = {\r\n      [newUnit]: `${Object.values(unitValues)[0]}`,\r\n      [Object.keys(unitValues)[hasSwappedUnits ? 0 : 1]]:\r\n        updatedConversionFunctions[hasSwappedUnits ? 1 : 0](\r\n          Number(Object.values(unitValues)[0])\r\n        ),\r\n    };\r\n    // When changing unit of 2nd input.\r\n  } else {\r\n    updatedConversionFunctions = getConversionFunctions(\r\n      unitType,\r\n      units[hasSwappedUnits ? 1 : 0],\r\n      newUnit\r\n    );\r\n\r\n    updatedUnitValues = {\r\n      [Object.keys(unitValues)[hasSwappedUnits ? 1 : 0]]:\r\n        updatedConversionFunctions[1](Number(Object.values(unitValues)[1])),\r\n      [newUnit]: `${Object.values(unitValues)[1]}`,\r\n    };\r\n  }\r\n\r\n  setUnitValues(updatedUnitValues);\r\n};\r\n","import { useContext } from \"react\";\r\nimport { UnitTypeContext } from \"../../App\";\r\nimport data from \"../../services/data\";\r\nimport { updateUnit } from \"../../services/unitConversion\";\r\nimport {\r\n  TChangeEvent,\r\n  TMapOfStrings,\r\n  TSetErrors,\r\n  TSetState,\r\n  TUnit,\r\n  TUnits,\r\n} from \"../../types/common\";\r\nimport styles from \"./Input.module.scss\";\r\ninterface IInputProps {\r\n  onChange: (e: TChangeEvent) => void;\r\n  value: number | string;\r\n  unit: TUnit;\r\n  units: TUnits;\r\n  errors: TMapOfStrings;\r\n  setErrors: TSetErrors;\r\n  setUnitValues: TSetState;\r\n}\r\n\r\nconst Input = ({\r\n  onChange,\r\n  value,\r\n  unit,\r\n  units,\r\n  errors,\r\n  setErrors,\r\n  setUnitValues,\r\n}: IInputProps) => {\r\n  const { unitType, unitValues } = useContext(UnitTypeContext);\r\n  const currentErrors = Object.entries(errors).filter((_) => _[1]);\r\n  const hasValidInput = !(currentErrors.length && currentErrors[0][0] === unit);\r\n  const errorMessage = !hasValidInput && currentErrors[0][1];\r\n  const unitOptions = Object.entries(data[unitType].unitsToLabels);\r\n\r\n  return (\r\n    <div className={styles.input_container}>\r\n      <input\r\n        data-testid=\"unit-input\"\r\n        onChange={onChange}\r\n        value={value}\r\n        className={`${styles.input} ${!hasValidInput && styles.input_error}`}\r\n      />\r\n      <span className={styles.error_message}>{errorMessage}</span>\r\n      <select\r\n        data-testid=\"unit-selector\"\r\n        onChange={(e) =>\r\n          updateUnit({\r\n            e,\r\n            unit,\r\n            units,\r\n            unitType,\r\n            unitValues,\r\n            setUnitValues,\r\n            errors,\r\n            setErrors,\r\n          })\r\n        }\r\n        className={styles.select}\r\n        value={unit}\r\n      >\r\n        {unitOptions.map(([dataUnit, dataLabel]) => (\r\n          <option\r\n            key={`${unitType}_${dataLabel}_option`}\r\n            value={dataUnit}\r\n          >{`${dataLabel}`}</option>\r\n        ))}\r\n      </select>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Input;\r\n","import { updateUnitValues } from \"../../services/unitConversion\";\r\nimport {\r\n  TChangeEvent,\r\n  TMapOfStringOrNumbers,\r\n  TMapOfStrings,\r\n  TSetErrors,\r\n  TSetState,\r\n  TUnits,\r\n} from \"../../types/common\";\r\nimport { default as Unit1Input, default as Unit2Input } from \"../input/Input\";\r\nimport styles from \"./Inputs.module.scss\";\r\n\r\ninterface IInputsProps {\r\n  units: TUnits;\r\n  unitValues: TMapOfStringOrNumbers;\r\n  setUnitValues: TSetState;\r\n  errors: TMapOfStrings;\r\n  setErrors: TSetErrors;\r\n  conversionFunctions: [(num: number) => number, (num: number) => number];\r\n}\r\n\r\nconst Inputs = ({\r\n  units,\r\n  unitValues,\r\n  setUnitValues,\r\n  errors,\r\n  setErrors,\r\n  conversionFunctions,\r\n}: IInputsProps) => {\r\n  return (\r\n    <div className={styles.inputs_grid}>\r\n      <Unit1Input\r\n        onChange={(e: TChangeEvent) =>\r\n          updateUnitValues({\r\n            e,\r\n            unit: units[0],\r\n            units,\r\n            leftToRightConversion: conversionFunctions[0],\r\n            rightToLeftConversion: conversionFunctions[1],\r\n            setState: setUnitValues,\r\n            setErrors,\r\n            errors,\r\n          })\r\n        }\r\n        value={Object.values(unitValues)[0]}\r\n        unit={units[0]}\r\n        units={units}\r\n        errors={errors}\r\n        setErrors={setErrors}\r\n        setUnitValues={setUnitValues}\r\n      />\r\n      <span className={styles.equalSign}>=</span>\r\n      <Unit2Input\r\n        onChange={(e: TChangeEvent) => {\r\n          updateUnitValues({\r\n            e,\r\n            unit: units[1],\r\n            units,\r\n            leftToRightConversion: conversionFunctions[0],\r\n            rightToLeftConversion: conversionFunctions[1],\r\n            setState: setUnitValues,\r\n            setErrors,\r\n            errors,\r\n          });\r\n        }}\r\n        value={Object.values(unitValues)[1]}\r\n        unit={units[1]}\r\n        units={units}\r\n        errors={errors}\r\n        setErrors={setErrors}\r\n        setUnitValues={setUnitValues}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Inputs;\r\n","import { createContext, useEffect, useState } from \"react\";\r\nimport data from \"../src/services/data\";\r\nimport styles from \"./App.module.scss\";\r\nimport Inputs from \"./components/inputs/Inputs\";\r\nimport { getConversionFunctions, getFormula } from \"./services/unitConversion\";\r\nimport { IMap } from \"./types/common\";\r\n\r\nexport const UnitTypeContext = createContext<any>(null);\r\n\r\nfunction App() {\r\n  const [unitType, setUnitType] = useState(\"Length\");\r\n  const [defaultUnit1, defaultUnit2] = [\r\n    Object.keys(data[unitType].unitsToLabels)[0],\r\n    Object.keys(data[unitType].unitsToLabels)[1],\r\n  ];\r\n  const [unitValues, setUnitValues] = useState<IMap<string | number>>({\r\n    [defaultUnit1]: 0,\r\n    [defaultUnit2]: 0,\r\n  });\r\n\r\n  const [unit1, unit2] = [\r\n    Object.keys(unitValues)[0],\r\n    Object.keys(unitValues)[1],\r\n  ];\r\n\r\n  const [errors, setErrors] = useState<IMap<string>>({\r\n    [defaultUnit1]: \"\",\r\n    [defaultUnit2]: \"\",\r\n  });\r\n\r\n  useEffect(() => {\r\n    setUnitValues({ [defaultUnit1]: 0, [defaultUnit2]: 0 });\r\n    setErrors({ [defaultUnit1]: \"\", [defaultUnit2]: \"\" });\r\n    // eslint-disable-next-line\r\n  }, [unitType]);\r\n\r\n  return (\r\n    <UnitTypeContext.Provider value={{ unitValues, unitType }}>\r\n      <div className={styles.App}>\r\n        <div className={styles.unit_converter_container}>\r\n          <h1 className={styles.title}>Unit Converter</h1>\r\n          <select\r\n            data-testid=\"unit-type-selector\"\r\n            onChange={(e) => {\r\n              setUnitType(e.target.value);\r\n            }}\r\n            className={styles.measurement_selector_input}\r\n          >\r\n            {Object.keys(data).map((unitTypeValue) => (\r\n              <option key={`${unitTypeValue}_option`} value={unitTypeValue}>\r\n                {unitTypeValue}\r\n              </option>\r\n            ))}\r\n          </select>\r\n          <Inputs\r\n            units={[unit1, unit2]}\r\n            unitValues={unitValues}\r\n            setUnitValues={setUnitValues}\r\n            errors={errors}\r\n            setErrors={setErrors}\r\n            conversionFunctions={getConversionFunctions(unitType, unit1, unit2)}\r\n          />\r\n          <div data-testid=\"formula\">\r\n            <span className={styles.formula_logo}>Formula</span>{\" \"}\r\n            {getFormula(unitType, unit1, unit2)}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </UnitTypeContext.Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}